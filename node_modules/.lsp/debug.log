Hello - from /home/piau/.vscode/extensions/jaredly.reason-vscode-1.7.13/bin.native.linux
Previous log location: /tmp/lsp.log
Sending notification {"jsonrpc": "2.0", "method": "client/registerCapability", "params": {"registrations": [{"id": "watching", "method": "workspace/didChangeWatchedFiles", "registerOptions": {"watchers": [{"globPattern": "**/bsconfig.json"}, {"globPattern": "**/.merlin"}]}}]}}
Sending response {"id": 0, "jsonrpc": "2.0", "result": {"capabilities": {"textDocumentSync": 1, "hoverProvider": true, "completionProvider": {"resolveProvider": true, "triggerCharacters": ["."]}, "signatureHelpProvider": {"triggerCharacters": ["("]}, "definitionProvider": true, "typeDefinitionProvider": true, "referencesProvider": true, "documentSymbolProvider": true, "codeActionProvider": true, "executeCommandProvider": {"commands": ["reason-language-server.add_to_interface_inner"]}, "codeLensProvider": {"resolveProvider": true}, "documentHighlightProvider": true, "documentRangeFormattingProvider": true, "documentFormattingProvider": true, "renameProvider": true}}}
Read message 
{"jsonrpc":"2.0","method":"initialized","params":{}}
Read message 
{"jsonrpc":"2.0","method":"workspace/didChangeConfiguration","params":{"settings":{"reason_language_server":{"location":"","build_system_override_by_root":{},"refmt":"","lispRefmt":"","mlfmt":"","format_width":80,"per_value_codelens":false,"dependencies_codelens":true,"opens_codelens":true,"show_module_path_on_hover":true,"reloadOnChange":false,"show_debug_errors":false,"autoRebuild":true}}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/piau/Bureau/cacaprout/GeometryDashPFA/collisions.ml","languageId":"ocaml","version":1,"text":"open Component_defs\n\nclass type collidable =\n  object\n    inherit velocity\n    inherit position\n    inherit box\n    inherit mass\n    inherit on_jump\n    inherit block_type\n  end\n\ntype t = collidable;;\ntype blockSide = Top | Bottom | Left | Right;;\n\nlet init () = ()\n\nlet onCollision (b1: collidable) (b2: collidable) =\n  let t1 = b1#block_type#get in\n  let t2 = b2#block_type#get in\n\n  (* si le joueur b1 tombe sur une pique b2 *)\n  if(t1 = Block_type.Player || t2 = Block_type.Player) then\n    let ply = Game_state.get_player() in\n    let solid = (if t1 != Block_type.Player then b1 else b2) in\n    let solid_type = solid#block_type#get in\n    let side = ref Top in\n    let size = solid#box#get in\n\n    (* On veut savoir de quel côté il touche le bloc *)\n    let normVec1 = Vector.normalize (Vector.sub ply#position#get solid#position#get) in\n    (* Haut à gauche*)\n    let normVec2 = Vector.normalize (\n      Vector.sub (\n        Vector.add solid#position#get (Vector.{x = float_of_int (-size.width / 2); y = float_of_int (-size.height / 2)})) \n        solid#position#get\n    ) in\n    \n    if (normVec2.y > normVec1.y) then\n      side := Top\n    else if (normVec1.y > (-. normVec2.y)) then\n      side := Bottom\n    else if (normVec1.x < normVec2.x) then\n      side := Left\n    else\n      side := Right;\n    \n    let on_ground = (!side == Top && not ply#inverted_gravity#get) || (!side == Bottom && ply#inverted_gravity#get) in\n\n    match solid_type with\n    | Block_type.Spikes -> ply#position#set (Vector.{x = 0.0; y = 0.0});\n    | Block_type.Solid ->  if on_ground then (\n      (* Redonner les sauts au joueur *)\n      ply#on_jump#set 1;\n\n      (* Reset son angle*)\n      let ang = (int_of_float ply#rot#get) mod 90 in\n      let rot = (if ang < 45 then Float.floor (ply#rot#get /. 90.0) else Float.ceil (ply#rot#get /. 90.0)) in\n      ply#rot#set (rot *. 90.0);\n    )\n    | _ -> () ;;\n\nlet update _dt el =\n  Seq.iteri\n    (fun i (e1 : t) ->\n      (* les composants du rectangle r1 *)\n      let pos1 = e1#position#get in\n      let box1 = e1#box#get in\n      let v1 = e1#velocity#get in\n      let m1 = e1#mass#get in\n      Seq.iteri\n        (fun j (e2 : t) ->\n          (*Gfx.debug \"%f\" (e1#velocity#get).x;*)\n          let m2 = e2#mass#get in\n          (* Une double boucle qui évite de comparer deux fois\n             les objets : si on compare A et B, on ne compare pas B et A.\n             Il faudra améliorer cela si on a beaucoup (> 30) objets simultanément.\n          *)\n\n          if j > i && (Float.is_finite m1 || Float.is_finite m2) then begin\n            (* les composants du rectangle r2 *)\n            let pos2 = e2#position#get in\n            let box2 = e2#box#get in\n            (* les vitesses *)\n            let v2 = e2#velocity#get in\n            (* [1] la soustraction de Minkowski *)\n            let s_pos, s_rect = Rect.mdiff pos2 box2 pos1 box1 in\n            (* [2] si intersection et un des objets et mobile, les objets rebondissent *)\n            if\n              Rect.has_origin s_pos s_rect\n              && not (Vector.is_zero v1 && Vector.is_zero v2)\n            then begin\n              (* [3] le plus petit des vecteurs a b c d *)\n              let a = Vector.{ x = s_pos.x; y = 0.0 } in\n              let b = Vector.{ x = float s_rect.width +. s_pos.x; y = 0.0 } in\n              let c = Vector.{ x = 0.0; y = s_pos.y } in\n              let d = Vector.{ x = 0.0; y = float s_rect.height +. s_pos.y } in\n              let n =\n                List.fold_left\n                  (fun min_v v ->\n                    if Vector.norm v <= Vector.norm min_v then v else min_v)\n                  d [ a; b; c ]\n              in\n              (*  [4] rapport des vitesses et déplacement des objets *)\n              let n_v1 = Vector.norm v1 in\n              let n_v2 = Vector.norm v2 in\n              let s = 1.01 /. (n_v1 +. n_v2) in\n              let n1 = n_v1 *. s in\n              let n2 = n_v2 *. s in\n              let delta_pos1 = Vector.mult n1 n in\n              let delta_pos2 = Vector.mult (-.n2) n in\n              let pos1 = Vector.add pos1 delta_pos1 in\n              let pos2 = Vector.add pos2 delta_pos2 in\n              let s_pos, s_rect = Rect.mdiff pos2 box2 pos1 box1 in\n              if Rect.has_origin s_pos s_rect then begin\n                Gfx.debug \"%f, %f, %d x %d\\n\" s_pos.Vector.x s_pos.Vector.y\n                  s_rect.Rect.width s_rect.Rect.height\n                (*assert false*)\n              end;\n              e1#position#set pos1;\n              e2#position#set pos2;\n\n              (* [5] On normalise n (on calcule un vecteur de même direction mais de norme 1) *)\n              let n = Vector.normalize n in\n              (* [6] Vitesse relative entre v2 et v1 *)\n              let v = Vector.sub v1 v2 in\n\n              (* Préparation au calcul de l'impulsion *)\n              (* Elasticité fixe. En pratique, l'elasticité peut être stockée dans\n                 les objets comme un composant : 1 pour la balle et les murs, 0.5 pour\n                 des obstacles absorbants, 1.2 pour des obstacles rebondissant, … *)\n              let e = 0.0 in\n              (* normalisation des masses *)\n              let m1, m2 =\n                if Float.is_infinite m1 && Float.is_infinite m2 then\n                  if n_v1 = 0.0 then (m1, 1.0)\n                  else if n_v2 = 0.0 then (1.0, m2)\n                  else (0.0, 0.0)\n                else (m1, m2)\n              in\n              (* [7] calcul de l'impulsion *)\n              (*\n              let jbase = -.(1.0 +. e) *. Vector.dot v n in\n              let m1divm2 = m1 /. m2 in\n              let m2divm1 = m2 /. m1 in\n              let j1 = jbase /. (1.0 +. m1divm2) in\n              let j2 = jbase /. (1.0 +. m2divm1) in\n              *)\n              let j =\n                -.(1.0 +. e) *. Vector.dot v n /. ((1. /. m1) +. (1. /. m2))\n              in\n              (* [8] calcul des nouvelles vitesses *)\n              let new_v1 = Vector.add v1 (Vector.mult (j/. m1) n) in\n              let new_v2 = Vector.sub v2 (Vector.mult (j/. m2) n) in\n              (* [9] mise à jour des vitesses *)\n              e1#velocity#set new_v1;\n              e2#velocity#set new_v2;\n\n              (* Une collision avec le joueur à eu lieu ?*)\n              onCollision e1 e2;\n            end;\n          end)\n        el)\n    el\n"}}}
Found a `dune` file at /home/piau/Bureau/cacaprout/GeometryDashPFA
]] Making a new jbuilder package at /home/piau/Bureau/cacaprout/GeometryDashPFA
=== Project root: /home/piau/Bureau/cacaprout/GeometryDashPFA
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/piau/Bureau/cacaprout/GeometryDashPFA/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":1,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/piau/Bureau/cacaprout/GeometryDashPFA/collisions.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/piau/Bureau/cacaprout/GeometryDashPFA
]] Making a new jbuilder package at /home/piau/Bureau/cacaprout/GeometryDashPFA
=== Project root: /home/piau/Bureau/cacaprout/GeometryDashPFA
Detected `opam` dependency manager for local use
Sending response {"id": 1, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/piau/Bureau/cacaprout/GeometryDashPFA/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":2,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/piau/Bureau/cacaprout/GeometryDashPFA/collisions.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[{"range":{"start":{"line":0,"character":0},"end":{"line":1,"character":0}},"message":"No config found for file \"collisions.ml\" in \".\". Try calling `dune build`.","severity":1,"source":"ocamllsp"}]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0112056732178ms
Found a `dune` file at /home/piau/Bureau/cacaprout/GeometryDashPFA
]] Making a new jbuilder package at /home/piau/Bureau/cacaprout/GeometryDashPFA
=== Project root: /home/piau/Bureau/cacaprout/GeometryDashPFA
Detected `opam` dependency manager for local use
Sending response {"id": 2, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/piau/Bureau/cacaprout/GeometryDashPFA/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":3,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/piau/Bureau/cacaprout/GeometryDashPFA/collisions.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0138282775879ms
Found a `dune` file at /home/piau/Bureau/cacaprout/GeometryDashPFA
]] Making a new jbuilder package at /home/piau/Bureau/cacaprout/GeometryDashPFA
=== Project root: /home/piau/Bureau/cacaprout/GeometryDashPFA
Detected `opam` dependency manager for local use
Sending response {"id": 3, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: Unable to read /home/piau/Bureau/cacaprout/GeometryDashPFA/.merlin", "command": ""}}]}
Found a `dune` file at /home/piau/Bureau/cacaprout/GeometryDashPFA
]] Making a new jbuilder package at /home/piau/Bureau/cacaprout/GeometryDashPFA
=== Project root: /home/piau/Bureau/cacaprout/GeometryDashPFA
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":4,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/piau/Bureau/cacaprout/GeometryDashPFA/collisions.ml"},"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":19}},"context":{"diagnostics":[{"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":19}},"message":"A type variable is unbound in this type declaration.\nIn type 'a the variable 'a is unbound","severity":1,"source":"ocamllsp"},{"range":{"start":{"line":12,"character":9},"end":{"line":12,"character":19}},"message":"Unbound type constructor collidable","severity":1,"source":"ocamllsp"}]}}}
[server] Got a method textDocument/codeAction
[server] processing took 1.49488449097ms
Found a `dune` file at /home/piau/Bureau/cacaprout/GeometryDashPFA
]] Making a new jbuilder package at /home/piau/Bureau/cacaprout/GeometryDashPFA
=== Project root: /home/piau/Bureau/cacaprout/GeometryDashPFA
Detected `opam` dependency manager for local use
Sending response {"id": 4, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/piau/Bureau/cacaprout/GeometryDashPFA/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/piau/Bureau/cacaprout/GeometryDashPFA/collisions.ml"}}}
